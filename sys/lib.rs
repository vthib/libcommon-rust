
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#[link(name="libcommon", kind="static")]
#[link(name="libcommon-iop", kind="static")]
#[link(name="libcommon-minimal", kind="static")]
extern "C" {}
    /* automatically generated by rust-bindgen */

pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union data_t {
    pub ptr: *mut ::std::os::raw::c_void,
    pub u32: u32,
    pub u64: u64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_data_t() {
    assert_eq!(
        ::std::mem::size_of::<data_t>(),
        8usize,
        concat!("Size of: ", stringify!(data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<data_t>(),
        8usize,
        concat!("Alignment of ", stringify!(data_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<data_t>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(data_t),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<data_t>())).u32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(data_t),
            "::",
            stringify!(u32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<data_t>())).u64 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(data_t),
            "::",
            stringify!(u64)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ev_t {
    _unused: [u8; 0],
}
pub type el_t = *mut ev_t;
pub type el_cb_f = ::std::option::Option<unsafe extern "C" fn(arg1: el_t, arg2: data_t)>;
extern "C" {
    pub fn el_blocker_register() -> el_t;
}
extern "C" {
    pub fn el_unregister(arg1: *mut el_t) -> data_t;
}
pub const ev_timer_flags_t_EL_TIMER_NOMISS: ev_timer_flags_t = 1;
pub const ev_timer_flags_t_EL_TIMER_LOWRES: ev_timer_flags_t = 2;
pub type ev_timer_flags_t = u32;
extern "C" {
    pub fn el_timer_register_d(
        next: i64,
        repeat: i64,
        flags: ev_timer_flags_t,
        arg1: el_cb_f,
        arg2: data_t,
    ) -> el_t;
}
extern "C" {
    pub fn el_unref(arg1: el_t) -> el_t;
}
extern "C" {
    pub fn el_loop();
}
extern "C" {
    pub fn el_loop_timeout(msecs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn el_has_pending_events() -> bool;
}
